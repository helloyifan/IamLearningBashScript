#!/bin/bash

#Assignment 1 Question5
#Name Yifan Dai,20475820

#usage()
#Displays the proper way to use the bashscript when called upon
usage()
{
	echo "Usage: "
	echo "./runSuite suite.txt ./program"
}



#comparetest() 
#Main computation, first it checks for any missing .in or .out file
#Then provides the .in file and compares it to the output.


compareTest(){


	tstName=${1}
	

	if [ ! -r ${direc}/${1}.in ] ; then
		echo "$1.in file is unreadable!" 1>&2
		exit 1
	fi
	if [ ! -r ${direc}/${1}.out ] ; then
		echo "$1.out file is unreadable!" 1>&2
		exit 1
	fi
	if [ ! -e ${direc}/${1}.out ] ; then
		echo "$1.out file does not exist!" 1>&2
		exit 1
	fi
	if [ ! -e ${direc}/${1}.in ] ; then
		echo "$1.in file does not exist!" 1>&2
		exit 1
	fi
	
	dirloc="$(dirname "${1}")"
	input="${dirloc}/${1}.in"
	output="${dirloc}/${1}.out"
	actual=`mktemp /tmp/${dirloc}/${1}.XXXXXX`


	${program} < ${input} > ${actual}                      


	diff ${actual} ${output} > /tmp/diff

	if [ ! ${?} -eq 0 ]; then

	echo "Test failed: ${tstName}"                                 
                        echo "Input:"
                        cat ${input}
                        echo "Expected:"
                        cat ${output}
                        echo "Actual:"
                        cat ${actual}
	fi

	rm ${actual}
	rm /tmp/diff
}


#The other error stuff goes here

if [ $# -lt 2 ] ; then #Check there is enough command line parameters.
        usage
        echo "Not enough parameters! (Needs two parameters!)" 1>&2
        exit 1
fi

if [ ! -e $1 ] ; then
        usage
        echo "$1 does not exist!" 1>&2
        exit 1
fi

if [ ! -e $2 ] ; then
        usage
        echo "$2 does not exist!" 1>&2
        exit 1
fi


program=${2}
file=${2}
direc=$(dirname ${program})
suiteFile=${direc}/${1}


for file in `egrep '*' ${suiteFile}` ; do              
        compareTest ${file}                                           
done


